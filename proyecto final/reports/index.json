{
  "stats": {
    "suites": 12,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-06T16:13:09.357Z",
    "end": "2024-08-06T16:13:28.490Z",
    "duration": 19133,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "39fdcff0-9f2f-46ff-85b7-9262e98665af",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1809,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Conectar a la base de datos\nawait mongoose.connect(MONGODB_CNX_STR);",
          "err": {},
          "uuid": "a377abc4-fa77-49db-a80d-f70e69580a83",
          "parentUUID": "39fdcff0-9f2f-46ff-85b7-9262e98665af",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 9,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Desconectar de la base de datos\nawait mongoose.disconnect();",
          "err": {},
          "uuid": "d14a3fb6-5c20-446c-851d-94fccd78dfd7",
          "parentUUID": "39fdcff0-9f2f-46ff-85b7-9262e98665af",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1008,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "this.timeout(10000);\n// Limpiar colecciones después de cada prueba\nconst collections = await mongoose.connection.db\n    .listCollections()\n    .toArray();\nawait mongoose.connection.db.collection('productos').deleteMany({});\nawait mongoose.connection.db.collection('carritos').deleteMany({});\nawait mongoose.connection.db.collection('sessions').deleteMany({});\nawait mongoose.connection.db.collection('usuarios').deleteMany({});",
          "err": {},
          "uuid": "0070aff8-693a-49e1-8ae1-7b1646037a63",
          "parentUUID": "39fdcff0-9f2f-46ff-85b7-9262e98665af",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "ba733888-ce95-426b-94fb-791149286187",
          "title": "Testing productos:",
          "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
          "file": "\\test\\super.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac4e98ff-8cc9-4493-8560-b4218cdc0e8a",
              "title": "Agregar un producto:",
              "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
              "file": "\\test\\super.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería agregar un producto correctamente",
                  "fullTitle": "Testing productos: Agregar un producto: debería agregar un producto correctamente",
                  "timedOut": false,
                  "duration": 543,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const producto = {\n    title: 'Casa',\n    description: 'Descripción de la casa',\n    price: 4241,\n    thumbnail: 'url-de-imagen',\n    code: `unique-code-${Date.now()}`,\n    stock: 10,\n    category: 'Inmuebles',\n    status: true,\n    owner: 'user@example.com',\n};\nconst { statusCode, body } = await requester.post('/api/productos').send(producto);\nexpect(statusCode).to.equal(200);\nexpect(body).to.have.property('_id');\nexpect(body).to.have.property('title', 'Casa');\n// Validaciones adicionales de los campos",
                  "err": {},
                  "uuid": "e8492876-d2e7-45f5-9be0-a6432dc053de",
                  "parentUUID": "ac4e98ff-8cc9-4493-8560-b4218cdc0e8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8492876-d2e7-45f5-9be0-a6432dc053de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 543,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b85e87ed-bac5-41d1-9ca1-5f4985efae47",
              "title": "Obtener productos:",
              "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
              "file": "\\test\\super.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería obtener una lista de productos",
                  "fullTitle": "Testing productos: Obtener productos: debería obtener una lista de productos",
                  "timedOut": false,
                  "duration": 183,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { statusCode, body } = await requester.get('/api/productos');\nexpect(statusCode).to.equal(200);\nexpect(body).to.be.an('array');\nbody.forEach(producto => {\n    expect(producto).to.have.property('_id');\n    expect(producto).to.have.property('title');\n    // Validaciones adicionales de los campos\n});",
                  "err": {},
                  "uuid": "a2fef177-b28d-4177-8da2-80c6475fe750",
                  "parentUUID": "b85e87ed-bac5-41d1-9ca1-5f4985efae47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2fef177-b28d-4177-8da2-80c6475fe750"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 183,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d9d247e2-cdf5-4cff-a67a-6d56c4ceb8e6",
              "title": "Eliminar un producto:",
              "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
              "file": "\\test\\super.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería eliminar un producto correctamente",
                  "fullTitle": "Testing productos: Eliminar un producto: debería eliminar un producto correctamente",
                  "timedOut": false,
                  "duration": 558,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const producto = {\n    title: 'Auto',\n    description: 'Descripción del auto',\n    price: 15000,\n    thumbnail: 'url-de-imagen',\n    code: `unique-code-${Date.now()}`,\n    stock: 5,\n    category: 'Vehículos',\n    status: true,\n    owner: 'user@example.com',\n};\nconst { body: productoAgregado } = await requester.post('/api/productos').send(producto);\nconst { _id } = productoAgregado;\nconst { statusCode, body } = await requester.delete(`/api/productos/${_id}`);\nexpect(statusCode).to.equal(200);\nexpect(body).to.have.property('message').that.includes('Se eliminó el producto');",
                  "err": {},
                  "uuid": "63240359-790c-4e57-b588-a222d3da6c4d",
                  "parentUUID": "d9d247e2-cdf5-4cff-a67a-6d56c4ceb8e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63240359-790c-4e57-b588-a222d3da6c4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 558,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "29e7d92c-4be2-4916-9332-6a8095a8eec5",
          "title": "testing carritos:",
          "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
          "file": "\\test\\super.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eef99680-51fd-479e-b645-ecbef3d59f16",
              "title": "Crear un producto:",
              "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
              "file": "\\test\\super.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "crear carrito",
                  "fullTitle": "testing carritos: Crear un producto: crear carrito",
                  "timedOut": false,
                  "duration": 366,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { statusCode, ok, body } = await requester.post(\n    '/api/carrito/:userId'\n);\nexpect(statusCode).to.equal(200);\nexpect(ok).to.be.true;\nexpect(body).to.be.an('object'); // Espera un objeto en lugar de un array\nexpect(body).to.have.property('carrito');\nexpect(body.carrito).to.be.an('object'); // Asegúrate de que 'carrito' sea un objeto",
                  "err": {},
                  "uuid": "a2df48f3-9a8f-456e-aa21-dfe47e5cd12c",
                  "parentUUID": "eef99680-51fd-479e-b645-ecbef3d59f16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2df48f3-9a8f-456e-aa21-dfe47e5cd12c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 366,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "68bf610d-8f10-42cc-8eda-464c8ee939fb",
              "title": "Agregar un producto al carrito:",
              "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
              "file": "\\test\\super.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería agregar un producto al carrito correctamente",
                  "fullTitle": "testing carritos: Agregar un producto al carrito: debería agregar un producto al carrito correctamente",
                  "timedOut": false,
                  "duration": 846,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Primero, crea un carrito para agregar productos\nconst carritoResponse = await requester.post('/api/carrito/1234'); \n      \nconst carritoId = carritoResponse.body.carrito._id;\n    \n// Luego, agrega un producto al carrito\nconst producto = {\n    producto :{\n        _id: 'ofdskafok34',\n        title: 'casa',\n        description: 'adsfads',\n        price: 4241,\n        thumbnail: 'dsa234',\n        code: `unique-code-${Date.now()}`,\n        stock: 3241,\n        category: 'dsfa',\n        status: true,\n        owner: 'joaquin.ariel.lopez.98@gmail.com',\n    }\n}\n \nconst { statusCode, ok, body } = await requester\n    .post(`/api/carrito/addProduct/${carritoId}`)\n    .send(producto);\nexpect(statusCode).to.equal(200);\nexpect(ok).to.be.true;\nexpect(body).to.be.an('object');\nexpect(body).to.have.property('carrito');\nexpect(body.carrito).to.be.an('object'); // O ajusta según la estructura que devuelves",
                  "err": {},
                  "uuid": "cbe397e5-5296-42c8-801a-3c687c45c5ec",
                  "parentUUID": "68bf610d-8f10-42cc-8eda-464c8ee939fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cbe397e5-5296-42c8-801a-3c687c45c5ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 846,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "56b82f5b-5507-416b-8b88-fc72466b5edd",
              "title": "Eliminar un producto del carrito:",
              "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
              "file": "\\test\\super.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería eliminar un producto del carrito correctamente",
                  "fullTitle": "testing carritos: Eliminar un producto del carrito: debería eliminar un producto del carrito correctamente",
                  "timedOut": false,
                  "duration": 1153,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Primero, crea un carrito para agregar productos\nconst carritoResponse = await requester.post('/api/carrito/1234');\nconst carritoId = carritoResponse.body.carrito._id;\n// Luego, agrega un producto al carrito\nconst producto = {\n    producto: {\n        _id: 'ofdskafok34',\n        title: 'casa',\n        description: 'adsfads',\n        price: 4241,\n        thumbnail: 'dsa234',\n        code: `unique-code-${Date.now()}`,\n        stock: 3241,\n        category: 'dsfa',\n        status: true,\n        owner: 'joaquin.ariel.lopez.98@gmail.com',\n    }\n};\nawait requester\n    .post(`/api/carrito/addProduct/${carritoId}`)\n    .send(producto);\n// Luego, elimina el producto agregado\nconst { statusCode, ok, body } = await requester.delete(`/api/carrito/${carritoId}/ofdskafok34`);\nexpect(statusCode).to.equal(200);\nexpect(ok).to.be.true;\nexpect(body).to.be.an('object'); // Ajusta según la estructura que devuelves\nexpect(body).to.have.property('_id');",
                  "err": {},
                  "uuid": "2c5f149d-366a-486c-a62f-39869e84d03f",
                  "parentUUID": "56b82f5b-5507-416b-8b88-fc72466b5edd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c5f149d-366a-486c-a62f-39869e84d03f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1153,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1a2b189b-8e42-4bc6-9791-379eaf424632",
          "title": "Testing sesiones:",
          "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
          "file": "\\test\\super.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "56fe2d97-f3a9-4308-9133-1b9d44c5a9b7",
              "title": "Iniciar sesión:",
              "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
              "file": "\\test\\super.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería iniciar sesión correctamente",
                  "fullTitle": "Testing sesiones: Iniciar sesión: debería iniciar sesión correctamente",
                  "timedOut": false,
                  "duration": 1708,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const datos = {\n    nombre: 'x',\n    apellido: 'x',\n    email: 'x@x.com',\n    password: '1234',\n};\nawait requester.post('/api/usuarios').send(datos);\nconst { statusCode, text } = await requester\n    .post('/api/sesiones')\n    .send({ email: 'x@x.com', password: '1234' });\nconst body = JSON.parse(text);\nexpect(statusCode).to.equal(201);\nexpect(body).to.have.property('message', 'login success');",
                  "err": {},
                  "uuid": "03c9e7ac-744c-4024-9cc6-b9234ed52f86",
                  "parentUUID": "56fe2d97-f3a9-4308-9133-1b9d44c5a9b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería fallar con credenciales incorrectas",
                  "fullTitle": "Testing sesiones: Iniciar sesión: debería fallar con credenciales incorrectas",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const credentials = {\n    username: 'usuario',\n    password: 'password',\n};\nconst { statusCode, body } = await requester\n    .post('/api/sesiones')\n    .send(credentials);\nexpect(statusCode).to.equal(401);\nexpect(body).to.have.property('status', 'error');\nexpect(body).to.have.property('message');",
                  "err": {},
                  "uuid": "b23db4ef-5980-4756-8a5b-955fc809072b",
                  "parentUUID": "56fe2d97-f3a9-4308-9133-1b9d44c5a9b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03c9e7ac-744c-4024-9cc6-b9234ed52f86",
                "b23db4ef-5980-4756-8a5b-955fc809072b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1716,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1e6c9895-f5fa-4e95-8ac4-8e9b7471bf53",
              "title": "Obtener sesión actual:",
              "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
              "file": "\\test\\super.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería obtener la sesión actual",
                  "fullTitle": "Testing sesiones: Obtener sesión actual: debería obtener la sesión actual",
                  "timedOut": false,
                  "duration": 2248,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const datos = {\n    nombre: 'x',\n    apellido: 'x',\n    email: 'x@x.com',\n    password: '1234',\n};\n// Registrar el usuario\nawait requester.post('/api/usuarios').send(datos);\nconst loginResponse = await requester\n    .post('/api/sesiones')\n    .send({ email: 'x@x.com', password: '1234' });\nconst cookies = loginResponse.headers['set-cookie'];\nconst response = await requester\n    .get('/api/usuarios/current')\n    .set('Cookie', cookies); \nconst { statusCode, body } = response;\nexpect(statusCode).to.equal(200); \nexpect(body).to.have.property('payload');",
                  "err": {},
                  "uuid": "438b95ee-f525-40cb-b320-b3a848c35eae",
                  "parentUUID": "1e6c9895-f5fa-4e95-8ac4-8e9b7471bf53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "438b95ee-f525-40cb-b320-b3a848c35eae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2248,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "28a6ae95-6ac2-4063-8cb0-54f8870afd73",
              "title": "Cerrar sesión:",
              "fullFile": "C:\\Users\\Tap\\Desktop\\Coder Houser\\proyectos coderhouse\\proyecto final\\test\\super.test.js",
              "file": "\\test\\super.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería cerrar sesión correctamente",
                  "fullTitle": "Testing sesiones: Cerrar sesión: debería cerrar sesión correctamente",
                  "timedOut": false,
                  "duration": 188,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const credentials = {\n    username: 'testuser',\n    password: 'testpassword'\n};\nawait requester.post('/api/sesiones').send(credentials);\nconst { statusCode, body } = await requester.delete('/api/sesiones/current');\nexpect(statusCode).to.equal(200);\nexpect(body).to.have.property('status', 'success');\nexpect(body).to.have.property('message', 'logout OK');",
                  "err": {},
                  "uuid": "4beb91a3-bd2f-4f9a-9286-e78096828a19",
                  "parentUUID": "28a6ae95-6ac2-4063-8cb0-54f8870afd73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4beb91a3-bd2f-4f9a-9286-e78096828a19"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 188,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "index"
      },
      "version": "6.2.0"
    }
  }
}